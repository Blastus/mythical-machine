# Register FFFFF, which is (1 << 20) - 1, will contain an offset to registers
# F7FFF through FFFFE, which are (1 << 20) - 1 - (1 << 15) through
# (1 << 20) - 2. The range of registers will contain a stack of function call
# return locations.

# Go to the beginning of the program.

400 20-----020000000-----               goto ----- if 0 == 0 else -----

# Create a subroutine that allows one function to call another. The routine
# will require two pieces of information: (1) where the function being called
# is located and (2) what return address should be used on return. Register
# F7FFD, (1 << 20) - 3 - (1 << 15), will be used for the call address; and
# register F7FFE, (1 << 20) - 2 - (1 << 15), will be used for the return
# address.

# Register F7FFC, (1 << 20) - 4 - (1 << 15) will be used by the routine.

# INSTRUCTION: call(target_address=REG[F7FFD], return_address=REG[F7FFE])

# call_stack_offset = REG[FFFFF]
# temp = REG[F7FFC]

401 12F7FFC002FFFFF008000   call        temp = call_stack_offset < 8000
402 2000403032F7FFC000407               goto _c1 if temp != 0 else _c2
403 12F7FFC060F7FFF2FFFFF   _c1         temp = F7FFF + call_stack_offset
404 16F7FFC062F7FFE000000               REG[temp] = return_address + 0
405 12FFFFF062FFFFF000001               call_stack_offset = call_stack_offset + 1
406 22F7FFD020000002F7FFD               goto target_address if 0 == 0 else target_address
# print('\ncall stack space full\n', 2)
407 17000020600000A000000   _c2         PORT[00002] = '\n' + 0
408 170000206000063000000               PORT[00002] = 'c' + 0
409 170000206000061000000               PORT[00002] = 'a' + 0
40A 17000020600006C000000               PORT[00002] = 'l' + 0
40B 17000020600006C000000               PORT[00002] = 'l' + 0
40C 170000206000020000000               PORT[00002] = ' ' + 0
40D 170000206000073000000               PORT[00002] = 's' + 0
40E 170000206000074000000               PORT[00002] = 't' + 0
40F 170000206000061000000               PORT[00002] = 'a' + 0
410 170000206000063000000               PORT[00002] = 'c' + 0
411 17000020600006B000000               PORT[00002] = 'k' + 0
412 170000206000020000000               PORT[00002] = ' ' + 0
413 170000206000073000000               PORT[00002] = 's' + 0
414 170000206000070000000               PORT[00002] = 'p' + 0
415 170000206000061000000               PORT[00002] = 'a' + 0
416 170000206000063000000               PORT[00002] = 'c' + 0
417 170000206000065000000               PORT[00002] = 'e' + 0
418 170000206000020000000               PORT[00002] = ' ' + 0
419 170000206000066000000               PORT[00002] = 'f' + 0
41A 170000206000075000000               PORT[00002] = 'u' + 0
41B 17000020600006C000000               PORT[00002] = 'l' + 0
41C 17000020600006C000000               PORT[00002] = 'l' + 0
41D 17000020600000A000000               PORT[00002] = '\n' + 0
41E 000000000000000000000               halt

# Now a subroutine needs to be created for returning from a function call. No
# parameters are needed to activate this subroutine.

# Register F7FFC, (1 << 20) - 4 - (1 << 15) will be used by the routine.

# INSTRUCTION: return

# call_stack_offset = REG[FFFFF]
# temp = REG[F7FFC]

41F 2000420042FFFFF000423   return      goto _r1 if call_stack_offset > 0 else _r2
420 12FFFFF072FFFFF000001   _r1         call_stack_offset = call_stack_offset - 1
421 12F7FFC060F7FFF2FFFFF               temp = F7FFF + call_stack_offset
422 26F7FFC020000006F7FFC               goto REG[temp] if 0 == 0 else REG[temp]
# print('\ncall stack space empty\n', 2)
423 17000020600000A000000   _r2         PORT[00002] = '\n' + 0
424 170000206000063000000               PORT[00002] = 'c' + 0
425 170000206000061000000               PORT[00002] = 'a' + 0
426 17000020600006C000000               PORT[00002] = 'l' + 0
427 17000020600006C000000               PORT[00002] = 'l' + 0
428 170000206000020000000               PORT[00002] = ' ' + 0
429 170000206000073000000               PORT[00002] = 's' + 0
42A 170000206000074000000               PORT[00002] = 't' + 0
42B 170000206000061000000               PORT[00002] = 'a' + 0
42C 170000206000063000000               PORT[00002] = 'c' + 0
42D 17000020600006B000000               PORT[00002] = 'k' + 0
42E 170000206000020000000               PORT[00002] = ' ' + 0
42F 170000206000073000000               PORT[00002] = 's' + 0
430 170000206000070000000               PORT[00002] = 'p' + 0
431 170000206000061000000               PORT[00002] = 'a' + 0
432 170000206000063000000               PORT[00002] = 'c' + 0
433 170000206000065000000               PORT[00002] = 'e' + 0
434 170000206000020000000               PORT[00002] = ' ' + 0
435 170000206000065000000               PORT[00002] = 'e' + 0
436 17000020600006D000000               PORT[00002] = 'm' + 0
437 170000206000070000000               PORT[00002] = 'p' + 0
438 170000206000074000000               PORT[00002] = 't' + 0
439 170000206000079000000               PORT[00002] = 'y' + 0
43A 17000020600000A000000               PORT[00002] = '\n' + 0
43B 000000000000000000000               halt

# Let us create a stack now. Since Whitespace was a language with a stack and
# was used a lot in code, we might as well have a stack as well. There are
# several instructions that we need:
#   PUSH            put a value on top of stack if there is room
#   DUPLICATE       copy the top item on stack to above itself
#   COPY(offset)    takes one argument and adds copy to top of stack
#   SWAP            swaps the top two values on the stack
#   DISCARD         pop and forget top item on the stack
#   SLIDE(count)    delete count items on stack under the top
# See http://compsoc.dur.ac.uk/whitespace/tutorial.php for a list of commands.

# Alternatively, we could and/or implement the 8086 stack instructions found at
# http://www.electronics.dit.ie/staff/tscarff/8086_instruction_set/
# 8086_instruction_set.html
# and also http://www.gabrielececchetti.it/Teaching/CalcolatoriElettronici/
# Docs/i8086_instruction_set.pdf
#   POP             pop value from stack and return if it exists
#   POPA            restore registers 0 - 31 from stack
#   PUSH(value)     push value onto the stack if there is room
#   PUSHA           push registers 0 - 31 to stack

# Register F7FFB will be used like register FFFFF. It will be an offset to
# registers EFFFB - F7FFA which will be used as storage space for the general-
# purpose stack. Register EFFFA will be used as the value pushed to or popped
# from the stack. Register F7FFE will contain the return address for the
# subroutine.

# INSTRUCTION: push(value=REG[EFFFA], return_address=REG[F7FFE])

# general_stack_offset = REG[F7FFB]
# temp = REG[F7FFC]

43C 12F7FFC002F7FFB008000   push        temp = general_stack_offset < 8000
43D 200043E032F7FFC000442               goto _pu1 if temp != 0 else _pu2
43E 12F7FFC060EFFFB2F7FFB   _pu1        temp = EFFFB + general_stack_offset
43F 16F7FFC062EFFFA000000               REG[temp] = value + 0
440 12F7FFB062F7FFB000001               general_stack_offset = general_stack_offset + 1
441 22F7FFE020000002F7FFE               goto return_address if 0 == 0 else return_address
# print('\ngeneral stack space full\n', 2)
442 17000020600000A000000   _pu2        PORT[00002] = '\n' + 0
443 170000206000067000000               PORT[00002] = 'g' + 0
444 170000206000065000000               PORT[00002] = 'e' + 0
445 17000020600006E000000               PORT[00002] = 'n' + 0
446 170000206000065000000               PORT[00002] = 'e' + 0
447 170000206000072000000               PORT[00002] = 'r' + 0
448 170000206000061000000               PORT[00002] = 'a' + 0
449 17000020600006C000000               PORT[00002] = 'l' + 0
44A 170000206000020000000               PORT[00002] = ' ' + 0
44B 170000206000073000000               PORT[00002] = 's' + 0
44C 170000206000074000000               PORT[00002] = 't' + 0
44D 170000206000061000000               PORT[00002] = 'a' + 0
44E 170000206000063000000               PORT[00002] = 'c' + 0
44F 17000020600006B000000               PORT[00002] = 'k' + 0
450 170000206000020000000               PORT[00002] = ' ' + 0
451 170000206000073000000               PORT[00002] = 's' + 0
452 170000206000070000000               PORT[00002] = 'p' + 0
453 170000206000061000000               PORT[00002] = 'a' + 0
454 170000206000063000000               PORT[00002] = 'c' + 0
455 170000206000065000000               PORT[00002] = 'e' + 0
456 170000206000020000000               PORT[00002] = ' ' + 0
457 170000206000066000000               PORT[00002] = 'f' + 0
458 170000206000075000000               PORT[00002] = 'u' + 0
459 17000020600006C000000               PORT[00002] = 'l' + 0
45A 17000020600006C000000               PORT[00002] = 'l' + 0
45B 17000020600000A000000               PORT[00002] = '\n' + 0
45C 000000000000000000000               halt

# INSTRUCTION: pop(return_address=REG[F7FFE]) > value=REG[EFFFA]

# general_stack_offset = REG[F7FFB]
# temp = REG[F7FFC]

45D 200045E042F7FFB000462   pop         goto _po1 if general_stack_offset > 0 else _po2
45E 12F7FFB072F7FFB000001   _po1        general_stack_offset = general_stack_offset - 1
45F 12F7FFC060EFFFB2F7FFB               temp = EFFFB + general_stack_offset
460 12EFFFA066F7FFC000000               value = REG[temp] + 0
461 22F7FFE020000002F7FFE               goto return_address if 0 == 0 else return_address
# print('\ngeneral stack space empty\n', 2)
462 17000020600000A000000   _po2        PORT[00002] = '\n' + 0
463 170000206000067000000               PORT[00002] = 'g' + 0
464 170000206000065000000               PORT[00002] = 'e' + 0
465 17000020600006E000000               PORT[00002] = 'n' + 0
466 170000206000065000000               PORT[00002] = 'e' + 0
467 170000206000072000000               PORT[00002] = 'r' + 0
468 170000206000061000000               PORT[00002] = 'a' + 0
469 17000020600006C000000               PORT[00002] = 'l' + 0
46A 170000206000020000000               PORT[00002] = ' ' + 0
46B 170000206000073000000               PORT[00002] = 's' + 0
46C 170000206000074000000               PORT[00002] = 't' + 0
46D 170000206000061000000               PORT[00002] = 'a' + 0
46E 170000206000063000000               PORT[00002] = 'c' + 0
46F 17000020600006B000000               PORT[00002] = 'k' + 0
470 170000206000020000000               PORT[00002] = ' ' + 0
471 170000206000073000000               PORT[00002] = 's' + 0
472 170000206000070000000               PORT[00002] = 'p' + 0
473 170000206000061000000               PORT[00002] = 'a' + 0
474 170000206000063000000               PORT[00002] = 'c' + 0
475 170000206000065000000               PORT[00002] = 'e' + 0
476 170000206000020000000               PORT[00002] = ' ' + 0
477 170000206000065000000               PORT[00002] = 'e' + 0
478 17000020600006D000000               PORT[00002] = 'm' + 0
479 170000206000070000000               PORT[00002] = 'p' + 0
47A 170000206000074000000               PORT[00002] = 't' + 0
47B 170000206000079000000               PORT[00002] = 'y' + 0
47C 17000020600000A000000               PORT[00002] = '\n' + 0
47D 000000000000000000000               halt

# INSTRUCTION: pusha(return_address=REG[EFFF9])

# push_return = REG[F7FFE]
# counter = REG[EFFF8]
# value = REG[EFFFA]
# temp = REG[F7FFC]

47E 12F7FFE06000482000000   pusha       push_return = _pua2 + 0
47F 12EFFF806000000000000               counter = 0 + 0
480 12EFFFA066EFFF8000000   _pua1       value = REG[counter] + 0
481 200043C0200000000043C               goto push if 0 == 0 else push
482 12EFFF8062EFFF8000001   _pua2       counter = counter + 1
483 12F7FFC002EFFF8000020               temp = counter < 20
484 2000480032F7FFC2EFFF9               goto _pua1 if temp != 0 else return_address

# INSTRUCTION: popa(return_address=REG[EFFF9])

# pop_return = REG[F7FFE]
# counter = REG[EFFF8]
# value = REG[EFFFA]

485 12F7FFE06000488000000   popa        pop_return = _poa1 + 0
486 12EFFF806000000000000               counter = 0 + 0
487 200045D0200000000045D               goto pop if 0 == 0 else pop
488 12EFFF8072EFFF8000001   _poa1       counter = counter - 1
489 16EFFF8062EFFFA000000               REG[counter] = value + 0
48A 200045D042EFFF82EFFF9               goto pop if counter > 0 else return_address

# It seems like it is time to write out first function(s). In particular, we
# need a "print" function that takes the address of an array with length and
# writes it to a port of our choosing. Since functions will be using the CALL,
# RETURN, PUSH, and POP subroutines, there is now enough functionality to start
# writing them. Instead of embedding error messages into the code as was done
# in the four subroutines mentioned, the error messages can be stored as data
# instead and reused more easily if needed.

# FUNCTION: print(string_pointer, port_number) -> 1 on success, 0 on error

# push_pop_return = REG[F7FFE]
# push_pop_value = REG[EFFFA]
# string_pointer = REG[0]
# port_number = REG[1]
# string_length = REG[2]
# temp = REG[3]

48B 12F7FFE0600048D000000   print       push_pop_return = _p1 + 0
48C 200045D0200000000045D               goto pop if 0 == 0 else pop
48D 1200001062EFFFA000000   _p1         port_number = push_pop_value + 0
48E 12F7FFE06000490000000               push_pop_return = _p2 + 0
48F 200045D0200000000045D               goto pop if 0 == 0 else pop
490 1200000062EFFFA000000   _p2         string_pointer = push_pop_value + 0
491 120000206400000000000               string_length = MEM[string_pointer] + 0
492 200049300200002000497               goto _p3 if string_length < 0 else _p5
493 12EFFFA06000000000000   _p3         push_pop_value = 0 + 0
494 12F7FFE06000496000000               push_pop_return = _p4 + 0
495 200043C0200000000043C               goto push if 0 == 0 else push
496 200041F0200000000041F   _p4         goto return if 0 == 0 else return
497 20004980020000200049C   _p5         goto _p6 if string_length == 0 else _p8
498 12EFFFA06000001000000   _p6         push_pop_value = 1 + 0
499 12F7FFE0600049B000000               push_pop_return = _p7 + 0
49A 200043C0200000000043C               goto push if 0 == 0 else push
49B 200041F0200000000041F   _p7         goto return if 0 == 0 else return
49C 120000206200002200000   _p8         string_length = string_length + string_pointer
49D 120000006200000000001   _p9         string_pointer = string_pointer + 1
49E 190000106400000000000               PORT[port_number] = MEM[string_pointer] + 0
49F 120000307200000200002               temp = string_pointer - string_length
4A0 20004A10220000300049D               goto _p10 if temp == 0 else _p9
4A1 12EFFFA06000001000000   _p10        push_pop_value = 1 + 0
4A2 12F7FFE060004A4000000               push_pop_return = _p11 + 0
4A3 200043C0200000000043C               goto push if 0 == 0 else push
4A4 200041F0200000000041F   _p11        goto return if 0 == 0 else return

# Now that the 8086 stack instructions have been implemented, we can focus on
# the remaining Whitespace instructions and/or Python instructions. We still
# need DUPLICATE, COPY(offset), SWAP, and SLIDE(count). Let us see how these
# compare to Python's bytecode instructions.
#   NOP             do nothing code
#   POP_TOP         same as pop instruction already implemented
#   ROT_TWO         swap top two items on the stack
#   ROT_THREE       lifts second and third stack item with top down to three
#   DUP_TOP         duplicate top value (single) on the stack
#   DUP_TOP_TWO     duplicate top two values on the stack

# From the previous list, we might conclude that the following subroutines are
# needed to allow further capabilities with the general stack:
#   COPY(offset)    offset is from top of (general) stack
#   DUP_TOP_1       shortcut for COPY(0) * 1
#   DUP_TOP_2       shortcut for COPY(1) * 2
#   DUP_TOP_3       shortcut for COPY(2) * 3
#   POPI(offset)    pop value at offset from top of stack
#   SLIDE(count)    shortcut for POP(1) * count
#   PUSHI(offset)   push value to place of offset from top of stack
#   ROT_2           swap top two items on the stack
#   ROT_3_UP        shortcut for POP; PUSHI(2)
#   ROT_3_DOWN      shortcut for POPI(2); PUSH
#   ROT_4_UP        shortcut for POP; PUSHI(3)
#   ROT_4_DOWN      shortcut for POPI(3); PUSH

# INSTRUCTION: copy(offset=REG[F7FFD], return_address=REG[F7FFE])

# general_stack_offset = REG[F7FFB]
# temp = REG[F7FFC]
# value = REG[EFFFA]

4A5 12F7FFC072F7FFB2F7FFD   copy        temp = general_stack_offset - offset
4A6 20004A7052F7FFC0004AA               goto _co1 if temp >= 0 else _co2
4A7 12F7FFC062F7FFC0EFFFB   _co1        temp = temp + EFFFB
4A8 12EFFFA066F7FFC000000               value = REG[temp] + 0
4A9 200043C0200000000043C               goto push if 0 == 0 else push
4AA 12EFFFA060004B6000000   _co2        value = 4B6 + 0
4AB 12F7FFE060004AD000000               return_address = _co3 + 0
4AC 200043C0200000000043C               goto push if 0 == 0 else push
4AD 12EFFFA06000002000000   _co3        value = 2 + 0
4AE 12F7FFE060004B0000000               return_address = _co4 + 0
4AF 200043C0200000000043C               goto push if 0 == 0 else push
4B0 12F7FFD0600048B000000   _co4        offset = print + 0
4B1 12F7FFE060004B3000000               return_address = _co5 + 0
4B2 200040102000000000401               goto call if 0 == 0 else call
4B3 12F7FFE060004B5000000   _co5        return_address = _co6 + 0
4B4 200045D0200000000045D               goto pop if 0 == 0 else pop
4B5 000000000000000000000   _co6        halt
4B6 '\ncopy offset too large\n'

# INSTRUCTION: dup_top_1(return_address=REG[F7FFE])

# offset = REG[F7FFD]

4CE 12F7FFD06000000000000   dup_top_1   REG[offset] = 0 + 0
4CF 20004A5020000000004A5               goto copy if 0 == 0 else copy

# INSTRUCTION: dup_top_2(return_address=REG[EFFF9])

# offset = REG[F7FFD]
# copy_return = REG[F7FFE]

4D0 12F7FFD06000001000000   dup_top_2   offset = 1 + 0
4D1 12F7FFE060004D3000000               copy_return = _dt2 + 0
4D2 20004A5020000000004A5               goto copy if 0 == 0 else copy
4D3 12F7FFE062EFFF9000000   _dt2        copy_return = return_address + 0
4D4 20004A5020000000004A5               goto copy if 0 == 0 else copy

# INSTRUCTION: dup_top_3(return_address=REG[EFFF9])

# offset = REG[F7FFD]
# copy_return = REG[F7FFE]

4D5 12F7FFD06000002000000   dup_top_3   offset = 2 + 0
4D6 12F7FFE060004D8000000               copy_return = _dt3_1 + 0
4D7 20004A5020000000004A5               goto copy if 0 == 0 else copy
4D8 12F7FFE060004DA000000   _dt3_1      copy_return = _dt3_2 + 0
4D9 20004A5020000000004A5               goto copy if 0 == 0 else copy
4DA 12F7FFE062EFFF9000000   _dt3_2      copy_return = return_address + 0
4DB 20004A5020000000004A5               goto copy if 0 == 0 else copy

# INSTRUCTION: popi(offset=REG[F7FFD], return_address=REG[F7FFE]) > value=REG[EFFFA]

# general_stack_offset = REG[F7FFB]
# temp = REG[F7FFC]
# counter = REG[EFFF8]

4DC 12F7FFC072F7FFB2F7FFD   popi        temp = general_stack_offset - offset
4DD 20004DE052F7FFC0004E8               goto _pi1 if temp >= 0 else _pi3
4DE 12F7FFC062F7FFC0EFFFB   _pi1        temp = temp + EFFFB
4DF 12EFFFA066F7FFC000000               value = REG[temp] + 0
4E0 12F7FFB072F7FFB000001               general_stack_offset = general_stack_offset - 1
4E1 12EFFF8062F7FFC000001               counter = temp + 1
4E2 20004E3042F7FFD2F7FFE               goto _pi2 if offset > 0 else return_address
4E3 16F7FFC066EFFF8000000   _pi2        REG[temp] = REG[counter] + 0
4E4 12F7FFC062F7FFC000001               temp = temp + 1
4E5 12EFFF8062EFFF8000001               counter = counter + 1
4E6 12F7FFD072F7FFD000001               offset = offset - 1
4E7 20004E3042F7FFD2F7FFE               goto _pi2 if offset > 0 else return_address
4E8 12EFFFA060004F4000000   _pi3        value = 4F4 + 0
4E9 12F7FFE060004EB000000               return_address = _pi4 + 0
4EA 200043C0200000000043C               goto push if 0 == 0 else push
4EB 12EFFFA06000002000000   _pi4        value = 2 + 0
4EC 12F7FFE060004EE000000               return_address = _pi5 + 0
4ED 200043C0200000000043C               goto push if 0 == 0 else push
4EE 12F7FFD0600048B000000   _pi5        offset = print + 0
4EF 12F7FFE060004F1000000               return_address = _pi6 + 0
4F0 200040102000000000401               goto call if 0 == 0 else call
4F1 12F7FFE060004F3000000   _pi6        return_address = _pi7 + 0
4F2 200045D0200000000045D               goto pop if 0 == 0 else pop
4F3 000000000000000000000   _pi7        halt
4F4 '\npopi offset too large\n'

# The SLIDE(count) instruction will probably differ from being implemented as
# POP(1) * count. Such an implementation is nice since there is an automatic
# guard against errors, but SLIDE does not need to fill the REG[EFFFA] register
# or continually remove the value just under the top of the general stack. See
# the following pseudocode to see a better implementation.

# Consider the fact that REG[F7FFB] always has the number of items already on
# the general stack. How many items may then be slid off the stack? The answer
# is REG[F7FFB] - 1 because the top item must remain on the stack. Instead of
# going through the process of sliding/popping items off the stack, we can
# REG[EFFFB + REG[F7FFB] - 1 - count] = REG[EFFFB + REG[F7FFB] - 1] and then
# REG[F7FFB] = REG[F7FFB] - count after count has been validated.

#   slide       top = general_stack_offset - 1
#               temp = count <= top
#               goto _s1 if temp != 0 else _s2
#   _s1         general_stack_offset = general_stack_offset - count
#               top = top + EFFFB
#               count = top - count
#               REG[count] = REG[top] + 0
#               goto return_address if 0 == 0 else return_address
#   _s2         top = slide_error + 0
#               return_address = _s3 + 0
#               goto push if 0 == 0 else push
#   _s3         top = 2 + 0
#               return_address = _s4 + 0
#               goto push if 0 == 0 else push
#   _s4         count = print + 0
#               return_address = _s5 + 0
#               goto call if 0 == 0 else call
#   _s5         return_address = _s6 + 0
#               goto pop if 0 == 0 else pop
#   _s6         halt
#   slide_error '\nslide count too large\n'

# INSTRUCTION: slide(count=REG[F7FFD], return_address=REG[F7FFE])

# general_stack_offset = REG[F7FFB]
# top = REG[EFFFA]
# temp = REG[F7FFC]

50C 12EFFFA072F7FFB000001   slide       top = general_stack_offset - 1
50D 12F7FFC012F7FFD2EFFFA               temp = count <= top
50E 200050F032F7FFC000514               goto _s1 if temp != 0 else _s2
50F 12F7FFB072F7FFB2F7FFD   _s1         general_stack_offset = general_stack_offset - count
510 12EFFFA062EFFFA0EFFFB               top = top + EFFFB
511 12F7FFD072EFFFA2F7FFD               count = top - count
512 16F7FFD066EFFFA000000               REG[count] = REG[top] + 0
513 22F7FFE020000002F7FFE               goto return_address if 0 == 0 else return_address
514 12EFFFA06000520000000   _s2         top = 520 + 0
515 12F7FFE06000517000000               return_address = _s3 + 0
516 200043C0200000000043C               goto push if 0 == 0 else push
517 12EFFFA06000002000000   _s3         top = 2 + 0
518 12F7FFE0600051A000000               return_address = _s4 + 0
519 200043C0200000000043C               goto push if 0 == 0 else push
51A 12F7FFD0600048B000000   _s4         count = print + 0
51B 12F7FFE0600051D000000               return_address = _s5 + 0
51C 200040102000000000401               goto call if 0 == 0 else call
51D 12F7FFE0600051F000000   _s5         return_address = _s6 + 0
51E 200045D0200000000045D               goto pop if 0 == 0 else pop
51F 000000000000000000000   _s6         halt
520 '\nslide count too large\n'

# INSTRUCTION: pushi(value, offset, return_address)

538